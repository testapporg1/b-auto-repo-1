# =============================================================
# Polaris Bridge CLI Scan Workflow
# =============================================================
# Docs:
#   Quickstart: https://documentation.blackduck.com/bundle/bridge/page/documentation/t_github-polaris-cli-quickstart.html
#   Full Command Reference: https://documentation.blackduck.com/bundle/bridge/page/documentation/c_complete-list-of-bridge-commands.html
# =============================================================

name: Polaris Bridge CLI Scan

on:
  push:
    branches: [main, master, develop, stage, release]
  pull_request:
    branches: [main, master, develop, stage, release]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  polaris:
    runs-on: windows-latest
    env:
      BRIDGE_POLARIS_SERVERURL: ${{ vars.POLARIS_URL }}
      BRIDGE_POLARIS_ACCESSTOKEN: ${{ secrets.POLARIS_ACCESS_TOKEN }}
      BRIDGE_POLARIS_ASSESSMENT_TYPES: SAST,SCA
      BRIDGE_POLARIS_REPORTS_SARIF_CREATE: "true"
      BRIDGE_POLARIS_UPLOAD_SARIF_REPORT: "true"
      BRIDGE_GITHUB_USER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # =============================================================
      # Checkout source
      # =============================================================
      - name: Checkout Source
        uses: actions/checkout@v4

      # =============================================================
      # Download & Setup Bridge CLI (cross-platform)
      # =============================================================
      - name: Download & Setup Bridge CLI
        shell: bash
        run: |
          set -e
          BRIDGE_CLI_DOWNLOAD_URL="https://repo.blackduck.com/bds-integrations-release/com/blackduck/integration/bridge/binaries/bridge-cli-bundle/latest"

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Detected Windows runner"
            pwsh -Command "
              \$bridgeUrl = '$BRIDGE_CLI_DOWNLOAD_URL';
              \$tempDir = \$env:RUNNER_TEMP;
              \$envFile = \$env:GITHUB_ENV;
              Invoke-WebRequest \"\$bridgeUrl/bridge-cli-bundle-win64.zip\" -OutFile \"bridge.zip\";
              Expand-Archive \"bridge.zip\" \$tempDir -Force;
              \$exe = (Get-ChildItem -Recurse -File \$tempDir -Filter bridge-cli.exe | Select-Object -First 1).FullName;
              \"BRIDGE_CLI_INSTALL_DIR=\$exe\" | Out-File -Append -FilePath \$envFile;
            "
          else
            echo "Detected $RUNNER_OS runner"
            OS=$([[ "$RUNNER_OS" == "macOS" ]] && ([[ $(uname -m) =~ arm ]] && echo macos_arm || echo macosx) || ([[ $(uname -m) =~ arm ]] && echo linux_arm || echo linux64))
            curl -sSL -o bridge.zip "$BRIDGE_CLI_DOWNLOAD_URL/bridge-cli-bundle-$OS.zip"
            unzip -qo bridge.zip -d "$RUNNER_TEMP"
            echo "BRIDGE_CLI_INSTALL_DIR=$(find "$RUNNER_TEMP" -type f -name bridge-cli | head -n1)" >> "$GITHUB_ENV"
          fi

      # =============================================================
      # Run Polaris scan (full scan on push)
      # =============================================================
      - name: Polaris Full Scan
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          echo "Running full scan for branch: ${{ github.ref_name }}"
          "${{ env.BRIDGE_CLI_INSTALL_DIR }}" --stage polaris --diagnostics \
            polaris.application.name="${{ github.event.repository.name }}" \
            polaris.project.name="${{ github.event.repository.name }}" \
            polaris.branch.name="${{ github.ref_name }}"

      # =============================================================
      # Run Polaris PR scan (incremental with comments)
      # =============================================================
      - name: Polaris PR Scan
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          echo "Running PR scan: source=${{ github.head_ref }}, target=${{ github.base_ref }}"
          "${{ env.BRIDGE_CLI_INSTALL_DIR }}" --stage polaris --diagnostics \
            polaris.prcomment.enabled=true \
            polaris.application.name="${{ github.event.repository.name }}" \
            polaris.project.name="${{ github.event.repository.name }}" \
            polaris.branch.name="${{ github.head_ref }}" \
            polaris.branch.parent.name="${{ github.base_ref }}" \
            github.repository.branch.name="${{ github.head_ref }}" \
            github.repository.name="${{ github.event.repository.name }}" \
            github.repository.owner.name="${{ github.repository_owner }}" \
            github.repository.pull.number="${{ github.event.number }}"
