# Polaris Bridge CLI Scan
name: Polaris Bridge CLI Scan

on:
  push:
    branches: [main, master, develop, stage, release]
  pull_request:
    branches: [main, master, develop, stage, release]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  polaris:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]   # Add macos-latest if you want
    env:
      BRIDGE_POLARIS_SERVERURL: ${{ vars.POLARIS_URL }}
      BRIDGE_POLARIS_ACCESSTOKEN: ${{ secrets.POLARIS_ACCESS_TOKEN }}
      BRIDGE_POLARIS_ASSESSMENT_TYPES: SAST,SCA
      BRIDGE_POLARIS_APPLICATION_NAME: ${{ github.event.repository.name }}
      BRIDGE_POLARIS_PROJECT_NAME: ${{ github.event.repository.name }}
      BRIDGE_POLARIS_BRANCH_NAME: ${{ github.event.ref_name }}
      BRIDGE_POLARIS_REPORTS_SARIF_CREATE: "true"
      BRIDGE_POLARIS_UPLOAD_SARIF_REPORT: "true"
      BRIDGE_GITHUB_USER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Download & Setup Bridge CLI
        shell: bash
        run: |
          BRIDGE_CLI_DOWNLOAD_URL="https://repo.blackduck.com/bds-integrations-release/com/blackduck/integration/bridge/binaries/bridge-cli-bundle/latest"

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pwsh -Command "
              \$bridgeUrl = '$BRIDGE_CLI_DOWNLOAD_URL';
              \$tempDir = \$env:RUNNER_TEMP;
              \$envFile = \$env:GITHUB_ENV;
              Invoke-WebRequest \"\$bridgeUrl/bridge-cli-bundle-win64.zip\" -OutFile 'bridge.zip';
              Expand-Archive 'bridge.zip' \$tempDir -Force;
              \$exe = (Get-ChildItem -Recurse -File \$tempDir -Filter bridge-cli.exe | Select-Object -First 1).FullName;
              \"BRIDGE_CLI_INSTALL_DIR=\$exe\" | Out-File -Append -FilePath \$envFile;
            "
          else
            OS=$([[ "$RUNNER_OS" == "macOS" ]] && ([[ $(uname -m) =~ arm ]] && echo macos_arm || echo macosx) || ([[ $(uname -m) =~ arm ]] && echo linux_arm || echo linux64))
            curl -sSL -o bridge.zip "$BRIDGE_CLI_DOWNLOAD_URL/bridge-cli-bundle-$OS.zip"
            unzip -qo bridge.zip -d "$RUNNER_TEMP"
            echo "BRIDGE_CLI_INSTALL_DIR=$(find "$RUNNER_TEMP" -type f -name bridge-cli | head -n1)" >> "$GITHUB_ENV"
          fi

      # --- Full Scan (Push / Dispatch) ---
      - name: Polaris Full Scan
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          echo "üîç Running Full Scan on $RUNNER_OS for branch: $GITHUB_REF_NAME"

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pwsh -Command "& \"$env:BRIDGE_CLI_INSTALL_DIR\" --stage polaris --diagnostics"
          else
            "$BRIDGE_CLI_INSTALL_DIR" --stage polaris --diagnostics
          fi

      # --- PR Scan (Pull Request) ---
      - name: Polaris PR Scan
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          echo "üîé Running PR Scan on $RUNNER_OS for PR: $GITHUB_REF_NAME"

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pwsh -Command "& \"$env:BRIDGE_CLI_INSTALL_DIR\" --stage polaris --diagnostics `
              polaris.prcomment.enabled=true `
              polaris.branch.parent.name='${{ github.event.base_ref }}' `
              github.repository.branch.name='${{ github.ref_name }}' `
              github.repository.name='${{ github.event.repository.name }}' `
              github.repository.owner.name='${{ github.repository_owner }}' `
              github.repository.pull.number='${{ github.event.number }}'"
          else
            "$BRIDGE_CLI_INSTALL_DIR" --stage polaris --diagnostics \
              polaris.prcomment.enabled=true \
              polaris.branch.parent.name="${{ github.event.base_ref }}" \
              github.repository.branch.name="${{ github.ref_name }}" \
              github.repository.name="${{ github.event.repository.name }}" \
              github.repository.owner.name="${{ github.repository_owner }}" \
              github.repository.pull.number="${{ github.event.number }}"
          fi
